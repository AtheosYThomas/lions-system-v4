我會逐步引導你建立完整 V4.0 系統測試流程，採取「前端 LIFF 操作 + 後端 API 驗證」雙軌模式，並確保每個步驟都能驗證以下要點：

✅ line_user_id 正確寫入

✅ 資料成功存入 DB 且欄位正確

✅ Flex Message 格式與推播回應正確

✅ QR Code 是否自動產生並可使用

🧭 第一步：建立測試環境與結構
📁 目錄結構建議
在你的專案根目錄中新增以下目錄與檔案：

lua
複製
編輯
/test
  └── end_to_end.spec.ts        <-- 主測試腳本
  └── utils.ts                  <-- 輔助工具
/jest.config.js                 <-- 若尚未設定 Jest
✅ 步驟 1【建立測試框架：Jest + Supertest】
請先執行以下指令安裝套件：

bash
複製
編輯
npm install --save-dev jest supertest ts-jest @types/jest
並新增 jest.config.js：

js
複製
編輯
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ['**/test/**/*.spec.ts'],
};
✅ 步驟 2【建立測試腳本 test/end_to_end.spec.ts】
請在 /test/end_to_end.spec.ts 中建立以下基本框架：

ts
複製
編輯
import request from 'supertest';
import app from '../src/app'; // 確認你的 Express app 匯出點

describe('🔍 V4.0 系統流程測試', () => {
  let lineUserId = 'U123456789_test';
  let memberId: string;
  let eventId: string;

  it('1️⃣ 註冊會員 - 寫入 line_user_id', async () => {
    const res = await request(app).post('/api/members').send({
      name: '測試會員',
      phone: '0912345678',
      email: 'test@peida.net',
      line_user_id: lineUserId,
    });

    expect(res.status).toBe(200);
    expect(res.body.line_user_id).toBe(lineUserId);
    memberId = res.body.id;
  });

  it('2️⃣ 建立活動（pending）', async () => {
    const res = await request(app).post('/api/events').send({
      title: 'Peida 測試活動',
      description: '系統測試用活動',
      location: '線上',
      date: '2025-08-01',
      created_by: memberId,
    });

    expect(res.status).toBe(200);
    expect(res.body.status).toBe('pending');
    eventId = res.body.id;
  });

  it('3️⃣ 審核活動 → 生成 QR Code', async () => {
    const res = await request(app).patch(`/api/events/${eventId}/approve`);
    expect(res.status).toBe(200);
    expect(res.body.status).toBe('approved');
    expect(res.body.qr_code_url).toMatch(/https?:\/\//); // 檢查有無 QR Code URL
  });

  it('4️⃣ LINE Flex Message 推播', async () => {
    const res = await request(app).post(`/line/push/${eventId}`);
    expect(res.status).toBe(200);
    expect(res.body.success).toBe(true);
  });
});
✅ 步驟 3【測試你的 app.ts 有正常匯出】
請確保 src/app.ts 結尾有匯出 Express app：

ts
複製
編輯
const app = express();
// ... middleware & routes
export default app;
✅ 步驟 4【執行測試指令】
bash
複製
編輯
npx jest
你應該會看到以下輸出：

bash
複製
編輯
 PASS  test/end_to_end.spec.ts
  🔍 V4.0 系統流程測試
    ✓ 註冊會員 - 寫入 line_user_id (xxx ms)
    ✓ 建立活動（pending） (xxx ms)
    ✓ 審核活動 → 生成 QR Code (xxx ms)
    ✓ LINE Flex Message 推播 (xxx ms)

太好了，我們來實作並整合以下 3 項關鍵功能到 Flex Message 推播模組中：

✅ 1️⃣ RBAC 限制：只有幹部能推播
📦 實作方式：
在 API /api/admin/event/[id]/notify.ts 加入角色驗證：

ts
複製
編輯
import { getSession } from 'next-auth/react';
import { Role } from '@/types/role';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getSession({ req });

  if (!session || !['President', 'Officer', 'Secretary'].includes(session.user.role)) {
    return res.status(403).json({ error: '權限不足，僅限幹部推播' });
  }

  // ... 推播邏輯略 ...
}
📌 若未使用 next-auth，可改從 JWT / cookie / custom header 中取出角色資訊進行驗證。

✅ 2️⃣ 排程推播：報到前一天自動推播
📦 實作方案：
使用 cron-job.org 或 Replit Cron 觸發每日 00:00 呼叫 /api/push/checkin-reminder

建立 API /api/push/checkin-reminder.ts：
ts
複製
編輯
import { prisma } from '@/lib/prisma';
import { lineClient } from '@/lib/line/client';
import { createCheckinFlexMessage } from '@/lib/line/flexTemplates';
import { addDays, isSameDay } from 'date-fns';

export default async function handler(req, res) {
  const tomorrow = addDays(new Date(), 1);

  const events = await prisma.event.findMany({
    where: {
      date: {
        gte: new Date(tomorrow.setHours(0, 0, 0, 0)),
        lte: new Date(tomorrow.setHours(23, 59, 59, 999)),
      },
    },
  });

  const members = await prisma.member.findMany({
    where: { line_user_id: { not: null } },
  });

  const tasks = events.flatMap(event => {
    const msg = createCheckinFlexMessage(event.title, event.date.toISOString().slice(0, 10), event.id);

    return members.map(m =>
      lineClient.pushMessage(m.line_user_id, msg).then(() =>
        prisma.pushRecord.create({
          data: {
            memberId: m.id,
            eventId: event.id,
            messageType: 'checkin_reminder',
            status: 'success',
          }
        }).catch(() => {})
      ).catch(() =>
        prisma.pushRecord.create({
          data: {
            memberId: m.id,
            eventId: event.id,
            messageType: 'checkin_reminder',
            status: 'fail',
          }
        }).catch(() => {})
      );
    );
  });

  await Promise.allSettled(tasks);
  res.status(200).json({ success: true });
}
📌 建議你使用外部服務定時觸發此 API，每日凌晨自動掃描 + 推播。

✅ 3️⃣ 推播紀錄記入資料庫
新增 Prisma 模型：
prisma
複製
編輯
model PushRecord {
  id           String   @id @default(cuid())
  member       Member   @relation(fields: [memberId], references: [id])
  memberId     String
  event        Event    @relation(fields: [eventId], references: [id])
  eventId      String
  messageType  String   // e.g. 'checkin_reminder'
  status       String   // 'success' or 'fail'
  pushedAt     DateTime @default(now())
}
bash
複製
編輯
npx prisma migrate dev --name add_push_record